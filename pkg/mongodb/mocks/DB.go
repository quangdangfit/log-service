// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mongo "go.mongodb.org/mongo-driver/mongo"

	mongodb "github.com/quangdangfit/log-service/pkg/mongodb"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// BulkWriteRaw provides a mock function with given fields: ctx, collection, operations, opts
func (_m *DB) BulkWriteRaw(ctx context.Context, collection string, operations []mongo.WriteModel, opts ...*options.BulkWriteOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection, operations)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []mongo.WriteModel, ...*options.BulkWriteOptions) error); ok {
		r0 = rf(ctx, collection, operations, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *DB) Close() {
	_m.Called()
}

// Count provides a mock function with given fields: ctx, collection, filter, opts
func (_m *DB) Count(ctx context.Context, collection string, filter interface{}, opts ...*options.CountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.CountOptions) (int64, error)); ok {
		return rf(ctx, collection, filter, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(ctx, collection, filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(ctx, collection, filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, collection, filter, opts
func (_m *DB) Delete(ctx context.Context, collection string, filter interface{}, opts *options.DeleteOptions) error {
	ret := _m.Called(ctx, collection, filter, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, *options.DeleteOptions) error); ok {
		r0 = rf(ctx, collection, filter, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureIndexes provides a mock function with given fields: ctx, collection, model
func (_m *DB) EnsureIndexes(ctx context.Context, collection string, model []mongo.IndexModel) error {
	ret := _m.Called(ctx, collection, model)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []mongo.IndexModel) error); ok {
		r0 = rf(ctx, collection, model)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, collection, result, opts
func (_m *DB) Find(ctx context.Context, collection string, result interface{}, opts ...mongodb.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection, result)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...mongodb.Option) error); ok {
		r0 = rf(ctx, collection, result, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, collection, id, result
func (_m *DB) FindById(ctx context.Context, collection string, id string, result interface{}) error {
	ret := _m.Called(ctx, collection, id, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) error); ok {
		r0 = rf(ctx, collection, id, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOne provides a mock function with given fields: ctx, collection, result, opts
func (_m *DB) FindOne(ctx context.Context, collection string, result interface{}, opts ...mongodb.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, collection, result)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, ...mongodb.Option) error); ok {
		r0 = rf(ctx, collection, result, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneAndUpdate provides a mock function with given fields: ctx, collection, filter, update, opts, result
func (_m *DB) FindOneAndUpdate(ctx context.Context, collection string, filter interface{}, update interface{}, opts *options.FindOneAndUpdateOptions, result interface{}) error {
	ret := _m.Called(ctx, collection, filter, update, opts, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, *options.FindOneAndUpdateOptions, interface{}) error); ok {
		r0 = rf(ctx, collection, filter, update, opts, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCollection provides a mock function with given fields: collection
func (_m *DB) GetCollection(collection string) *mongo.Collection {
	ret := _m.Called(collection)

	var r0 *mongo.Collection
	if rf, ok := ret.Get(0).(func(string) *mongo.Collection); ok {
		r0 = rf(collection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.Collection)
		}
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, collection, document
func (_m *DB) Insert(ctx context.Context, collection string, document interface{}) error {
	ret := _m.Called(ctx, collection, document)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, collection, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMany provides a mock function with given fields: ctx, collection, filter, update, _a4
func (_m *DB) UpdateMany(ctx context.Context, collection string, filter interface{}, update interface{}, _a4 *options.UpdateOptions) error {
	ret := _m.Called(ctx, collection, filter, update, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, *options.UpdateOptions) error); ok {
		r0 = rf(ctx, collection, filter, update, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateManyRaw provides a mock function with given fields: ctx, collection, filter, update, _a4
func (_m *DB) UpdateManyRaw(ctx context.Context, collection string, filter interface{}, update interface{}, _a4 *options.UpdateOptions) error {
	ret := _m.Called(ctx, collection, filter, update, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, *options.UpdateOptions) error); ok {
		r0 = rf(ctx, collection, filter, update, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOne provides a mock function with given fields: ctx, collection, filter, update, _a4
func (_m *DB) UpdateOne(ctx context.Context, collection string, filter interface{}, update interface{}, _a4 *options.UpdateOptions) error {
	ret := _m.Called(ctx, collection, filter, update, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, *options.UpdateOptions) error); ok {
		r0 = rf(ctx, collection, filter, update, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOneRaw provides a mock function with given fields: ctx, collection, filter, update, _a4
func (_m *DB) UpdateOneRaw(ctx context.Context, collection string, filter interface{}, update interface{}, _a4 *options.UpdateOptions) error {
	ret := _m.Called(ctx, collection, filter, update, _a4)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}, *options.UpdateOptions) error); ok {
		r0 = rf(ctx, collection, filter, update, _a4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithTransaction provides a mock function with given fields: callback
func (_m *DB) WithTransaction(callback func(mongo.SessionContext) (interface{}, error)) (interface{}, error) {
	ret := _m.Called(callback)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(func(mongo.SessionContext) (interface{}, error)) (interface{}, error)); ok {
		return rf(callback)
	}
	if rf, ok := ret.Get(0).(func(func(mongo.SessionContext) (interface{}, error)) interface{}); ok {
		r0 = rf(callback)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(func(mongo.SessionContext) (interface{}, error)) error); ok {
		r1 = rf(callback)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
